// Message types for curp client

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: curp-command.proto

package curpapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProposeConfChangeRequest_ConfChangeType int32

const (
	ProposeConfChangeRequest_Add        ProposeConfChangeRequest_ConfChangeType = 0
	ProposeConfChangeRequest_AddLearner ProposeConfChangeRequest_ConfChangeType = 1
	ProposeConfChangeRequest_Remove     ProposeConfChangeRequest_ConfChangeType = 2
	ProposeConfChangeRequest_Update     ProposeConfChangeRequest_ConfChangeType = 3
	ProposeConfChangeRequest_Promote    ProposeConfChangeRequest_ConfChangeType = 4
)

// Enum value maps for ProposeConfChangeRequest_ConfChangeType.
var (
	ProposeConfChangeRequest_ConfChangeType_name = map[int32]string{
		0: "Add",
		1: "AddLearner",
		2: "Remove",
		3: "Update",
		4: "Promote",
	}
	ProposeConfChangeRequest_ConfChangeType_value = map[string]int32{
		"Add":        0,
		"AddLearner": 1,
		"Remove":     2,
		"Update":     3,
		"Promote":    4,
	}
)

func (x ProposeConfChangeRequest_ConfChangeType) Enum() *ProposeConfChangeRequest_ConfChangeType {
	p := new(ProposeConfChangeRequest_ConfChangeType)
	*p = x
	return p
}

func (x ProposeConfChangeRequest_ConfChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProposeConfChangeRequest_ConfChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_curp_command_proto_enumTypes[0].Descriptor()
}

func (ProposeConfChangeRequest_ConfChangeType) Type() protoreflect.EnumType {
	return &file_curp_command_proto_enumTypes[0]
}

func (x ProposeConfChangeRequest_ConfChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProposeConfChangeRequest_ConfChangeType.Descriptor instead.
func (ProposeConfChangeRequest_ConfChangeType) EnumDescriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{14, 0}
}

type ProposeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	SeqNum   uint64 `protobuf:"varint,2,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
}

func (x *ProposeId) Reset() {
	*x = ProposeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeId) ProtoMessage() {}

func (x *ProposeId) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeId.ProtoReflect.Descriptor instead.
func (*ProposeId) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{0}
}

func (x *ProposeId) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *ProposeId) GetSeqNum() uint64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Addrs     []string `protobuf:"bytes,3,rep,name=addrs,proto3" json:"addrs,omitempty"`
	IsLearner bool     `protobuf:"varint,4,opt,name=is_learner,json=isLearner,proto3" json:"is_learner,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{1}
}

func (x *Member) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *Member) GetIsLearner() bool {
	if x != nil {
		return x.IsLearner
	}
	return false
}

type CmdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*CmdResult_Ok
	//	*CmdResult_Error
	Result isCmdResult_Result `protobuf_oneof:"result"`
}

func (x *CmdResult) Reset() {
	*x = CmdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdResult) ProtoMessage() {}

func (x *CmdResult) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdResult.ProtoReflect.Descriptor instead.
func (*CmdResult) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{2}
}

func (m *CmdResult) GetResult() isCmdResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *CmdResult) GetOk() []byte {
	if x, ok := x.GetResult().(*CmdResult_Ok); ok {
		return x.Ok
	}
	return nil
}

func (x *CmdResult) GetError() []byte {
	if x, ok := x.GetResult().(*CmdResult_Error); ok {
		return x.Error
	}
	return nil
}

type isCmdResult_Result interface {
	isCmdResult_Result()
}

type CmdResult_Ok struct {
	// The serialized command execute result
	// The original type is Command::ER
	Ok []byte `protobuf:"bytes,1,opt,name=ok,proto3,oneof"`
}

type CmdResult_Error struct {
	// The serialized command error
	// The original type is Command::Error
	Error []byte `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*CmdResult_Ok) isCmdResult_Result() {}

func (*CmdResult_Error) isCmdResult_Result() {}

// All possible errors that the curp server may encounter.
// This error will be serialized in the `detail` of the gRPC Status and returned
// to clients. The reason for not dividing into some levels is for the
// convenience of the client to make judgments. If some errors never be checked
// in client, they could be merged into `Internal`.
//
// Feel free to use `google.protobuf.Empty` as the client never concerned the
// details happens in the server. If your error needs the context to be passed
// within the server, you can implement a separate error and implement the
// From<YourError> trait for `CurpError`, see `StorageError`. Or your error
// context may also be passed with the client, add your error details in
// `CurpError`, see `Redirect` below.
//
// Please add comments above your error if you want to extend more :)
type CurpError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Err:
	//
	//	*CurpError_KeyConflict
	//	*CurpError_Duplicated
	//	*CurpError_ExpiredClientId
	//	*CurpError_InvalidConfig
	//	*CurpError_NodeNotExists
	//	*CurpError_NodeAlreadyExists
	//	*CurpError_LearnerNotCatchUp
	//	*CurpError_ShuttingDown
	//	*CurpError_WrongClusterVersion
	//	*CurpError_RpcTransport
	//	*CurpError_Redirect_
	//	*CurpError_Internal
	Err isCurpError_Err `protobuf_oneof:"err"`
}

func (x *CurpError) Reset() {
	*x = CurpError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurpError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurpError) ProtoMessage() {}

func (x *CurpError) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurpError.ProtoReflect.Descriptor instead.
func (*CurpError) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{3}
}

func (m *CurpError) GetErr() isCurpError_Err {
	if m != nil {
		return m.Err
	}
	return nil
}

func (x *CurpError) GetKeyConflict() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_KeyConflict); ok {
		return x.KeyConflict
	}
	return nil
}

func (x *CurpError) GetDuplicated() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_Duplicated); ok {
		return x.Duplicated
	}
	return nil
}

func (x *CurpError) GetExpiredClientId() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_ExpiredClientId); ok {
		return x.ExpiredClientId
	}
	return nil
}

func (x *CurpError) GetInvalidConfig() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_InvalidConfig); ok {
		return x.InvalidConfig
	}
	return nil
}

func (x *CurpError) GetNodeNotExists() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_NodeNotExists); ok {
		return x.NodeNotExists
	}
	return nil
}

func (x *CurpError) GetNodeAlreadyExists() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_NodeAlreadyExists); ok {
		return x.NodeAlreadyExists
	}
	return nil
}

func (x *CurpError) GetLearnerNotCatchUp() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_LearnerNotCatchUp); ok {
		return x.LearnerNotCatchUp
	}
	return nil
}

func (x *CurpError) GetShuttingDown() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_ShuttingDown); ok {
		return x.ShuttingDown
	}
	return nil
}

func (x *CurpError) GetWrongClusterVersion() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_WrongClusterVersion); ok {
		return x.WrongClusterVersion
	}
	return nil
}

func (x *CurpError) GetRpcTransport() *emptypb.Empty {
	if x, ok := x.GetErr().(*CurpError_RpcTransport); ok {
		return x.RpcTransport
	}
	return nil
}

func (x *CurpError) GetRedirect() *CurpError_Redirect {
	if x, ok := x.GetErr().(*CurpError_Redirect_); ok {
		return x.Redirect
	}
	return nil
}

func (x *CurpError) GetInternal() string {
	if x, ok := x.GetErr().(*CurpError_Internal); ok {
		return x.Internal
	}
	return ""
}

type isCurpError_Err interface {
	isCurpError_Err()
}

type CurpError_KeyConflict struct {
	// When a command conflicts with the server SP.
	KeyConflict *emptypb.Empty `protobuf:"bytes,1,opt,name=KeyConflict,proto3,oneof"`
}

type CurpError_Duplicated struct {
	// When a proposal id is duplicated.
	Duplicated *emptypb.Empty `protobuf:"bytes,2,opt,name=Duplicated,proto3,oneof"`
}

type CurpError_ExpiredClientId struct {
	// When the client id in a proposal id is expired.
	ExpiredClientId *emptypb.Empty `protobuf:"bytes,3,opt,name=ExpiredClientId,proto3,oneof"`
}

type CurpError_InvalidConfig struct {
	// When the conf change config is invalid.
	InvalidConfig *emptypb.Empty `protobuf:"bytes,4,opt,name=InvalidConfig,proto3,oneof"`
}

type CurpError_NodeNotExists struct {
	// When the conf change proposal remove a node which is not exists.
	NodeNotExists *emptypb.Empty `protobuf:"bytes,5,opt,name=NodeNotExists,proto3,oneof"`
}

type CurpError_NodeAlreadyExists struct {
	// When the conf change proposal add a node which is exists.
	NodeAlreadyExists *emptypb.Empty `protobuf:"bytes,6,opt,name=NodeAlreadyExists,proto3,oneof"`
}

type CurpError_LearnerNotCatchUp struct {
	// When the conf change proposal promote a lazy learner.
	LearnerNotCatchUp *emptypb.Empty `protobuf:"bytes,7,opt,name=LearnerNotCatchUp,proto3,oneof"`
}

type CurpError_ShuttingDown struct {
	// When the cluster is shutting down
	ShuttingDown *emptypb.Empty `protobuf:"bytes,8,opt,name=ShuttingDown,proto3,oneof"`
}

type CurpError_WrongClusterVersion struct {
	// When the request cluster_version does not match the cluster's.
	WrongClusterVersion *emptypb.Empty `protobuf:"bytes,9,opt,name=WrongClusterVersion,proto3,oneof"`
}

type CurpError_RpcTransport struct {
	// When rpc transport error happens, this means the request does not send
	// to server
	RpcTransport *emptypb.Empty `protobuf:"bytes,10,opt,name=RpcTransport,proto3,oneof"`
}

type CurpError_Redirect_ struct {
	// When the request should be send to leader and this node is not the
	// leader. Return the context to client to update its state.
	Redirect *CurpError_Redirect `protobuf:"bytes,11,opt,name=redirect,proto3,oneof"`
}

type CurpError_Internal struct {
	// The internal error that the client never concerned.
	// e.g.
	// 1. failed to allocate a new snapshot
	// 2. failed to reset the command executor by snapshot
	// 3. failed to get last applied index from command executor.
	// 4. io::Error
	// 5. failed to encode and decode some stuff, like pb serialize or bincode
	// serialize.
	// 6. failed in storage layer
	// ...
	Internal string `protobuf:"bytes,12,opt,name=Internal,proto3,oneof"`
}

func (*CurpError_KeyConflict) isCurpError_Err() {}

func (*CurpError_Duplicated) isCurpError_Err() {}

func (*CurpError_ExpiredClientId) isCurpError_Err() {}

func (*CurpError_InvalidConfig) isCurpError_Err() {}

func (*CurpError_NodeNotExists) isCurpError_Err() {}

func (*CurpError_NodeAlreadyExists) isCurpError_Err() {}

func (*CurpError_LearnerNotCatchUp) isCurpError_Err() {}

func (*CurpError_ShuttingDown) isCurpError_Err() {}

func (*CurpError_WrongClusterVersion) isCurpError_Err() {}

func (*CurpError_RpcTransport) isCurpError_Err() {}

func (*CurpError_Redirect_) isCurpError_Err() {}

func (*CurpError_Internal) isCurpError_Err() {}

type ProposeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposeId *ProposeId `protobuf:"bytes,1,opt,name=propose_id,json=proposeId,proto3" json:"propose_id,omitempty"`
	// The serialized command
	// The original type is `Command`
	Command        []byte `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	ClusterVersion uint64 `protobuf:"varint,3,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
}

func (x *ProposeRequest) Reset() {
	*x = ProposeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeRequest) ProtoMessage() {}

func (x *ProposeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeRequest.ProtoReflect.Descriptor instead.
func (*ProposeRequest) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{4}
}

func (x *ProposeRequest) GetProposeId() *ProposeId {
	if x != nil {
		return x.ProposeId
	}
	return nil
}

func (x *ProposeRequest) GetCommand() []byte {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ProposeRequest) GetClusterVersion() uint64 {
	if x != nil {
		return x.ClusterVersion
	}
	return 0
}

type ProposeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CmdResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ProposeResponse) Reset() {
	*x = ProposeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeResponse) ProtoMessage() {}

func (x *ProposeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeResponse.ProtoReflect.Descriptor instead.
func (*ProposeResponse) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{5}
}

func (x *ProposeResponse) GetResult() *CmdResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type WaitSyncedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposeId      *ProposeId `protobuf:"bytes,1,opt,name=propose_id,json=proposeId,proto3" json:"propose_id,omitempty"`
	ClusterVersion uint64     `protobuf:"varint,2,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
}

func (x *WaitSyncedRequest) Reset() {
	*x = WaitSyncedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitSyncedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitSyncedRequest) ProtoMessage() {}

func (x *WaitSyncedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitSyncedRequest.ProtoReflect.Descriptor instead.
func (*WaitSyncedRequest) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{6}
}

func (x *WaitSyncedRequest) GetProposeId() *ProposeId {
	if x != nil {
		return x.ProposeId
	}
	return nil
}

func (x *WaitSyncedRequest) GetClusterVersion() uint64 {
	if x != nil {
		return x.ClusterVersion
	}
	return 0
}

type WaitSyncedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The serialized command after sync result
	// The original type is Result<Command::ASR, Command::Error>
	AfterSyncResult *CmdResult `protobuf:"bytes,1,opt,name=after_sync_result,json=afterSyncResult,proto3" json:"after_sync_result,omitempty"`
	// The serialized command execute result
	// The original type is Result<Command::ER, Command::Error>
	ExeResult *CmdResult `protobuf:"bytes,2,opt,name=exe_result,json=exeResult,proto3" json:"exe_result,omitempty"`
}

func (x *WaitSyncedResponse) Reset() {
	*x = WaitSyncedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitSyncedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitSyncedResponse) ProtoMessage() {}

func (x *WaitSyncedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitSyncedResponse.ProtoReflect.Descriptor instead.
func (*WaitSyncedResponse) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{7}
}

func (x *WaitSyncedResponse) GetAfterSyncResult() *CmdResult {
	if x != nil {
		return x.AfterSyncResult
	}
	return nil
}

func (x *WaitSyncedResponse) GetExeResult() *CmdResult {
	if x != nil {
		return x.ExeResult
	}
	return nil
}

type FetchClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Linearizable bool `protobuf:"varint,1,opt,name=linearizable,proto3" json:"linearizable,omitempty"`
}

func (x *FetchClusterRequest) Reset() {
	*x = FetchClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchClusterRequest) ProtoMessage() {}

func (x *FetchClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchClusterRequest.ProtoReflect.Descriptor instead.
func (*FetchClusterRequest) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{8}
}

func (x *FetchClusterRequest) GetLinearizable() bool {
	if x != nil {
		return x.Linearizable
	}
	return false
}

type FetchClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderId       *uint64   `protobuf:"varint,1,opt,name=leader_id,json=leaderId,proto3,oneof" json:"leader_id,omitempty"`
	Term           uint64    `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	ClusterId      uint64    `protobuf:"varint,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Members        []*Member `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	ClusterVersion uint64    `protobuf:"varint,5,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
}

func (x *FetchClusterResponse) Reset() {
	*x = FetchClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchClusterResponse) ProtoMessage() {}

func (x *FetchClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchClusterResponse.ProtoReflect.Descriptor instead.
func (*FetchClusterResponse) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{9}
}

func (x *FetchClusterResponse) GetLeaderId() uint64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *FetchClusterResponse) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *FetchClusterResponse) GetClusterId() uint64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *FetchClusterResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *FetchClusterResponse) GetClusterVersion() uint64 {
	if x != nil {
		return x.ClusterVersion
	}
	return 0
}

type FetchReadStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command        []byte `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	ClusterVersion uint64 `protobuf:"varint,2,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
}

func (x *FetchReadStateRequest) Reset() {
	*x = FetchReadStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchReadStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchReadStateRequest) ProtoMessage() {}

func (x *FetchReadStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchReadStateRequest.ProtoReflect.Descriptor instead.
func (*FetchReadStateRequest) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{10}
}

func (x *FetchReadStateRequest) GetCommand() []byte {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *FetchReadStateRequest) GetClusterVersion() uint64 {
	if x != nil {
		return x.ClusterVersion
	}
	return 0
}

type FetchReadStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReadState:
	//
	//	*FetchReadStateResponse_Ids
	//	*FetchReadStateResponse_CommitIndex
	ReadState isFetchReadStateResponse_ReadState `protobuf_oneof:"read_state"`
}

func (x *FetchReadStateResponse) Reset() {
	*x = FetchReadStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchReadStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchReadStateResponse) ProtoMessage() {}

func (x *FetchReadStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchReadStateResponse.ProtoReflect.Descriptor instead.
func (*FetchReadStateResponse) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{11}
}

func (m *FetchReadStateResponse) GetReadState() isFetchReadStateResponse_ReadState {
	if m != nil {
		return m.ReadState
	}
	return nil
}

func (x *FetchReadStateResponse) GetIds() *FetchReadStateResponse_IdSet {
	if x, ok := x.GetReadState().(*FetchReadStateResponse_Ids); ok {
		return x.Ids
	}
	return nil
}

func (x *FetchReadStateResponse) GetCommitIndex() uint64 {
	if x, ok := x.GetReadState().(*FetchReadStateResponse_CommitIndex); ok {
		return x.CommitIndex
	}
	return 0
}

type isFetchReadStateResponse_ReadState interface {
	isFetchReadStateResponse_ReadState()
}

type FetchReadStateResponse_Ids struct {
	Ids *FetchReadStateResponse_IdSet `protobuf:"bytes,1,opt,name=ids,proto3,oneof"`
}

type FetchReadStateResponse_CommitIndex struct {
	CommitIndex uint64 `protobuf:"varint,2,opt,name=commit_index,json=commitIndex,proto3,oneof"`
}

func (*FetchReadStateResponse_Ids) isFetchReadStateResponse_ReadState() {}

func (*FetchReadStateResponse_CommitIndex) isFetchReadStateResponse_ReadState() {}

type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposeId      *ProposeId `protobuf:"bytes,1,opt,name=propose_id,json=proposeId,proto3" json:"propose_id,omitempty"`
	ClusterVersion uint64     `protobuf:"varint,2,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{12}
}

func (x *ShutdownRequest) GetProposeId() *ProposeId {
	if x != nil {
		return x.ProposeId
	}
	return nil
}

func (x *ShutdownRequest) GetClusterVersion() uint64 {
	if x != nil {
		return x.ClusterVersion
	}
	return 0
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{13}
}

type ProposeConfChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposeId      *ProposeId                             `protobuf:"bytes,1,opt,name=propose_id,json=proposeId,proto3" json:"propose_id,omitempty"`
	Changes        []*ProposeConfChangeRequest_ConfChange `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
	ClusterVersion uint64                                 `protobuf:"varint,3,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
}

func (x *ProposeConfChangeRequest) Reset() {
	*x = ProposeConfChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeConfChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeConfChangeRequest) ProtoMessage() {}

func (x *ProposeConfChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeConfChangeRequest.ProtoReflect.Descriptor instead.
func (*ProposeConfChangeRequest) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{14}
}

func (x *ProposeConfChangeRequest) GetProposeId() *ProposeId {
	if x != nil {
		return x.ProposeId
	}
	return nil
}

func (x *ProposeConfChangeRequest) GetChanges() []*ProposeConfChangeRequest_ConfChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *ProposeConfChangeRequest) GetClusterVersion() uint64 {
	if x != nil {
		return x.ClusterVersion
	}
	return 0
}

type ProposeConfChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *ProposeConfChangeResponse) Reset() {
	*x = ProposeConfChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeConfChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeConfChangeResponse) ProtoMessage() {}

func (x *ProposeConfChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeConfChangeResponse.ProtoReflect.Descriptor instead.
func (*ProposeConfChangeResponse) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{15}
}

func (x *ProposeConfChangeResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type PublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposeId *ProposeId `protobuf:"bytes,1,opt,name=propose_id,json=proposeId,proto3" json:"propose_id,omitempty"`
	NodeId    uint64     `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Name      string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{16}
}

func (x *PublishRequest) GetProposeId() *ProposeId {
	if x != nil {
		return x.ProposeId
	}
	return nil
}

func (x *PublishRequest) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *PublishRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{17}
}

type CurpError_Redirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderId *uint64 `protobuf:"varint,1,opt,name=leader_id,json=leaderId,proto3,oneof" json:"leader_id,omitempty"`
	Term     uint64  `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *CurpError_Redirect) Reset() {
	*x = CurpError_Redirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurpError_Redirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurpError_Redirect) ProtoMessage() {}

func (x *CurpError_Redirect) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurpError_Redirect.ProtoReflect.Descriptor instead.
func (*CurpError_Redirect) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CurpError_Redirect) GetLeaderId() uint64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *CurpError_Redirect) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

type FetchReadStateResponse_IdSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InflightIds []uint64 `protobuf:"varint,1,rep,packed,name=inflight_ids,json=inflightIds,proto3" json:"inflight_ids,omitempty"`
}

func (x *FetchReadStateResponse_IdSet) Reset() {
	*x = FetchReadStateResponse_IdSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchReadStateResponse_IdSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchReadStateResponse_IdSet) ProtoMessage() {}

func (x *FetchReadStateResponse_IdSet) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchReadStateResponse_IdSet.ProtoReflect.Descriptor instead.
func (*FetchReadStateResponse_IdSet) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{11, 0}
}

func (x *FetchReadStateResponse_IdSet) GetInflightIds() []uint64 {
	if x != nil {
		return x.InflightIds
	}
	return nil
}

type ProposeConfChangeRequest_ConfChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeType ProposeConfChangeRequest_ConfChangeType `protobuf:"varint,1,opt,name=change_type,json=changeType,proto3,enum=commandpb.ProposeConfChangeRequest_ConfChangeType" json:"change_type,omitempty"`
	NodeId     uint64                                  `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address    []string                                `protobuf:"bytes,3,rep,name=address,proto3" json:"address,omitempty"`
}

func (x *ProposeConfChangeRequest_ConfChange) Reset() {
	*x = ProposeConfChangeRequest_ConfChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_curp_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeConfChangeRequest_ConfChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeConfChangeRequest_ConfChange) ProtoMessage() {}

func (x *ProposeConfChangeRequest_ConfChange) ProtoReflect() protoreflect.Message {
	mi := &file_curp_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeConfChangeRequest_ConfChange.ProtoReflect.Descriptor instead.
func (*ProposeConfChangeRequest_ConfChange) Descriptor() ([]byte, []int) {
	return file_curp_command_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ProposeConfChangeRequest_ConfChange) GetChangeType() ProposeConfChangeRequest_ConfChangeType {
	if x != nil {
		return x.ChangeType
	}
	return ProposeConfChangeRequest_Add
}

func (x *ProposeConfChangeRequest_ConfChange) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ProposeConfChangeRequest_ConfChange) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

var File_curp_command_proto protoreflect.FileDescriptor

var file_curp_command_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x70, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22,
	0x61, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x22, 0x3f, 0x0a, 0x09, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x10, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xcf, 0x06, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x70, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x0b, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x38, 0x0a,
	0x0a, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x4e,
	0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x12, 0x3c, 0x0a, 0x0c, 0x53,
	0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x53, 0x68, 0x75,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x4a, 0x0a, 0x13, 0x57, 0x72, 0x6f,
	0x6e, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x13, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x52, 0x70, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70,
	0x62, 0x2e, 0x43, 0x75, 0x72, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x4e,
	0x0a, 0x08, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x08, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x05,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x49, 0x64, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x3f, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e,
	0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x71, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x69, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x70, 0x62, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a,
	0x0a, 0x65, 0x78, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x43, 0x6d,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x65, 0x78, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x39, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xcf, 0x01,
	0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22,
	0x5a, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x16,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x64, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x2a, 0x0a, 0x05, 0x49, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x6f, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x94, 0x01, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x65, 0x10, 0x04, 0x22, 0x48, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a,
	0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x64, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa6, 0x04, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x40, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x57, 0x61, 0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x57, 0x61, 0x69, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70,
	0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x70,
	0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x75, 0x72, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x42, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x09, 0x2e, 0x3b, 0x63, 0x75, 0x72, 0x70, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_curp_command_proto_rawDescOnce sync.Once
	file_curp_command_proto_rawDescData = file_curp_command_proto_rawDesc
)

func file_curp_command_proto_rawDescGZIP() []byte {
	file_curp_command_proto_rawDescOnce.Do(func() {
		file_curp_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_curp_command_proto_rawDescData)
	})
	return file_curp_command_proto_rawDescData
}

var file_curp_command_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_curp_command_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_curp_command_proto_goTypes = []interface{}{
	(ProposeConfChangeRequest_ConfChangeType)(0), // 0: commandpb.ProposeConfChangeRequest.ConfChangeType
	(*ProposeId)(nil),                           // 1: commandpb.ProposeId
	(*Member)(nil),                              // 2: commandpb.Member
	(*CmdResult)(nil),                           // 3: commandpb.CmdResult
	(*CurpError)(nil),                           // 4: commandpb.CurpError
	(*ProposeRequest)(nil),                      // 5: commandpb.ProposeRequest
	(*ProposeResponse)(nil),                     // 6: commandpb.ProposeResponse
	(*WaitSyncedRequest)(nil),                   // 7: commandpb.WaitSyncedRequest
	(*WaitSyncedResponse)(nil),                  // 8: commandpb.WaitSyncedResponse
	(*FetchClusterRequest)(nil),                 // 9: commandpb.FetchClusterRequest
	(*FetchClusterResponse)(nil),                // 10: commandpb.FetchClusterResponse
	(*FetchReadStateRequest)(nil),               // 11: commandpb.FetchReadStateRequest
	(*FetchReadStateResponse)(nil),              // 12: commandpb.FetchReadStateResponse
	(*ShutdownRequest)(nil),                     // 13: commandpb.ShutdownRequest
	(*ShutdownResponse)(nil),                    // 14: commandpb.ShutdownResponse
	(*ProposeConfChangeRequest)(nil),            // 15: commandpb.ProposeConfChangeRequest
	(*ProposeConfChangeResponse)(nil),           // 16: commandpb.ProposeConfChangeResponse
	(*PublishRequest)(nil),                      // 17: commandpb.PublishRequest
	(*PublishResponse)(nil),                     // 18: commandpb.PublishResponse
	(*CurpError_Redirect)(nil),                  // 19: commandpb.CurpError.Redirect
	(*FetchReadStateResponse_IdSet)(nil),        // 20: commandpb.FetchReadStateResponse.IdSet
	(*ProposeConfChangeRequest_ConfChange)(nil), // 21: commandpb.ProposeConfChangeRequest.ConfChange
	(*emptypb.Empty)(nil),                       // 22: google.protobuf.Empty
}
var file_curp_command_proto_depIdxs = []int32{
	22, // 0: commandpb.CurpError.KeyConflict:type_name -> google.protobuf.Empty
	22, // 1: commandpb.CurpError.Duplicated:type_name -> google.protobuf.Empty
	22, // 2: commandpb.CurpError.ExpiredClientId:type_name -> google.protobuf.Empty
	22, // 3: commandpb.CurpError.InvalidConfig:type_name -> google.protobuf.Empty
	22, // 4: commandpb.CurpError.NodeNotExists:type_name -> google.protobuf.Empty
	22, // 5: commandpb.CurpError.NodeAlreadyExists:type_name -> google.protobuf.Empty
	22, // 6: commandpb.CurpError.LearnerNotCatchUp:type_name -> google.protobuf.Empty
	22, // 7: commandpb.CurpError.ShuttingDown:type_name -> google.protobuf.Empty
	22, // 8: commandpb.CurpError.WrongClusterVersion:type_name -> google.protobuf.Empty
	22, // 9: commandpb.CurpError.RpcTransport:type_name -> google.protobuf.Empty
	19, // 10: commandpb.CurpError.redirect:type_name -> commandpb.CurpError.Redirect
	1,  // 11: commandpb.ProposeRequest.propose_id:type_name -> commandpb.ProposeId
	3,  // 12: commandpb.ProposeResponse.result:type_name -> commandpb.CmdResult
	1,  // 13: commandpb.WaitSyncedRequest.propose_id:type_name -> commandpb.ProposeId
	3,  // 14: commandpb.WaitSyncedResponse.after_sync_result:type_name -> commandpb.CmdResult
	3,  // 15: commandpb.WaitSyncedResponse.exe_result:type_name -> commandpb.CmdResult
	2,  // 16: commandpb.FetchClusterResponse.members:type_name -> commandpb.Member
	20, // 17: commandpb.FetchReadStateResponse.ids:type_name -> commandpb.FetchReadStateResponse.IdSet
	1,  // 18: commandpb.ShutdownRequest.propose_id:type_name -> commandpb.ProposeId
	1,  // 19: commandpb.ProposeConfChangeRequest.propose_id:type_name -> commandpb.ProposeId
	21, // 20: commandpb.ProposeConfChangeRequest.changes:type_name -> commandpb.ProposeConfChangeRequest.ConfChange
	2,  // 21: commandpb.ProposeConfChangeResponse.members:type_name -> commandpb.Member
	1,  // 22: commandpb.PublishRequest.propose_id:type_name -> commandpb.ProposeId
	0,  // 23: commandpb.ProposeConfChangeRequest.ConfChange.change_type:type_name -> commandpb.ProposeConfChangeRequest.ConfChangeType
	5,  // 24: commandpb.Protocol.Propose:input_type -> commandpb.ProposeRequest
	7,  // 25: commandpb.Protocol.WaitSynced:input_type -> commandpb.WaitSyncedRequest
	15, // 26: commandpb.Protocol.ProposeConfChange:input_type -> commandpb.ProposeConfChangeRequest
	17, // 27: commandpb.Protocol.Publish:input_type -> commandpb.PublishRequest
	13, // 28: commandpb.Protocol.Shutdown:input_type -> commandpb.ShutdownRequest
	9,  // 29: commandpb.Protocol.FetchCluster:input_type -> commandpb.FetchClusterRequest
	11, // 30: commandpb.Protocol.FetchReadState:input_type -> commandpb.FetchReadStateRequest
	6,  // 31: commandpb.Protocol.Propose:output_type -> commandpb.ProposeResponse
	8,  // 32: commandpb.Protocol.WaitSynced:output_type -> commandpb.WaitSyncedResponse
	16, // 33: commandpb.Protocol.ProposeConfChange:output_type -> commandpb.ProposeConfChangeResponse
	18, // 34: commandpb.Protocol.Publish:output_type -> commandpb.PublishResponse
	14, // 35: commandpb.Protocol.Shutdown:output_type -> commandpb.ShutdownResponse
	10, // 36: commandpb.Protocol.FetchCluster:output_type -> commandpb.FetchClusterResponse
	12, // 37: commandpb.Protocol.FetchReadState:output_type -> commandpb.FetchReadStateResponse
	31, // [31:38] is the sub-list for method output_type
	24, // [24:31] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_curp_command_proto_init() }
func file_curp_command_proto_init() {
	if File_curp_command_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_curp_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurpError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitSyncedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitSyncedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchReadStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchReadStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeConfChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeConfChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurpError_Redirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchReadStateResponse_IdSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_curp_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeConfChangeRequest_ConfChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_curp_command_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CmdResult_Ok)(nil),
		(*CmdResult_Error)(nil),
	}
	file_curp_command_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CurpError_KeyConflict)(nil),
		(*CurpError_Duplicated)(nil),
		(*CurpError_ExpiredClientId)(nil),
		(*CurpError_InvalidConfig)(nil),
		(*CurpError_NodeNotExists)(nil),
		(*CurpError_NodeAlreadyExists)(nil),
		(*CurpError_LearnerNotCatchUp)(nil),
		(*CurpError_ShuttingDown)(nil),
		(*CurpError_WrongClusterVersion)(nil),
		(*CurpError_RpcTransport)(nil),
		(*CurpError_Redirect_)(nil),
		(*CurpError_Internal)(nil),
	}
	file_curp_command_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_curp_command_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*FetchReadStateResponse_Ids)(nil),
		(*FetchReadStateResponse_CommitIndex)(nil),
	}
	file_curp_command_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_curp_command_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_curp_command_proto_goTypes,
		DependencyIndexes: file_curp_command_proto_depIdxs,
		EnumInfos:         file_curp_command_proto_enumTypes,
		MessageInfos:      file_curp_command_proto_msgTypes,
	}.Build()
	File_curp_command_proto = out.File
	file_curp_command_proto_rawDesc = nil
	file_curp_command_proto_goTypes = nil
	file_curp_command_proto_depIdxs = nil
}
