// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: curp-command.proto

package curpapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtocolClient is the client API for Protocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolClient interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeResponse, error)
	WaitSynced(ctx context.Context, in *WaitSyncedRequest, opts ...grpc.CallOption) (*WaitSyncedResponse, error)
	ProposeConfChange(ctx context.Context, in *ProposeConfChangeRequest, opts ...grpc.CallOption) (*ProposeConfChangeResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	FetchCluster(ctx context.Context, in *FetchClusterRequest, opts ...grpc.CallOption) (*FetchClusterResponse, error)
	FetchReadState(ctx context.Context, in *FetchReadStateRequest, opts ...grpc.CallOption) (*FetchReadStateResponse, error)
}

type protocolClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolClient(cc grpc.ClientConnInterface) ProtocolClient {
	return &protocolClient{cc}
}

func (c *protocolClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeResponse, error) {
	out := new(ProposeResponse)
	err := c.cc.Invoke(ctx, "/commandpb.Protocol/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) WaitSynced(ctx context.Context, in *WaitSyncedRequest, opts ...grpc.CallOption) (*WaitSyncedResponse, error) {
	out := new(WaitSyncedResponse)
	err := c.cc.Invoke(ctx, "/commandpb.Protocol/WaitSynced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) ProposeConfChange(ctx context.Context, in *ProposeConfChangeRequest, opts ...grpc.CallOption) (*ProposeConfChangeResponse, error) {
	out := new(ProposeConfChangeResponse)
	err := c.cc.Invoke(ctx, "/commandpb.Protocol/ProposeConfChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/commandpb.Protocol/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/commandpb.Protocol/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) FetchCluster(ctx context.Context, in *FetchClusterRequest, opts ...grpc.CallOption) (*FetchClusterResponse, error) {
	out := new(FetchClusterResponse)
	err := c.cc.Invoke(ctx, "/commandpb.Protocol/FetchCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) FetchReadState(ctx context.Context, in *FetchReadStateRequest, opts ...grpc.CallOption) (*FetchReadStateResponse, error) {
	out := new(FetchReadStateResponse)
	err := c.cc.Invoke(ctx, "/commandpb.Protocol/FetchReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolServer is the server API for Protocol service.
// All implementations must embed UnimplementedProtocolServer
// for forward compatibility
type ProtocolServer interface {
	Propose(context.Context, *ProposeRequest) (*ProposeResponse, error)
	WaitSynced(context.Context, *WaitSyncedRequest) (*WaitSyncedResponse, error)
	ProposeConfChange(context.Context, *ProposeConfChangeRequest) (*ProposeConfChangeResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	FetchCluster(context.Context, *FetchClusterRequest) (*FetchClusterResponse, error)
	FetchReadState(context.Context, *FetchReadStateRequest) (*FetchReadStateResponse, error)
	mustEmbedUnimplementedProtocolServer()
}

// UnimplementedProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedProtocolServer struct {
}

func (UnimplementedProtocolServer) Propose(context.Context, *ProposeRequest) (*ProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedProtocolServer) WaitSynced(context.Context, *WaitSyncedRequest) (*WaitSyncedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitSynced not implemented")
}
func (UnimplementedProtocolServer) ProposeConfChange(context.Context, *ProposeConfChangeRequest) (*ProposeConfChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeConfChange not implemented")
}
func (UnimplementedProtocolServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedProtocolServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedProtocolServer) FetchCluster(context.Context, *FetchClusterRequest) (*FetchClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCluster not implemented")
}
func (UnimplementedProtocolServer) FetchReadState(context.Context, *FetchReadStateRequest) (*FetchReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReadState not implemented")
}
func (UnimplementedProtocolServer) mustEmbedUnimplementedProtocolServer() {}

// UnsafeProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolServer will
// result in compilation errors.
type UnsafeProtocolServer interface {
	mustEmbedUnimplementedProtocolServer()
}

func RegisterProtocolServer(s grpc.ServiceRegistrar, srv ProtocolServer) {
	s.RegisterService(&Protocol_ServiceDesc, srv)
}

func _Protocol_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandpb.Protocol/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_WaitSynced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitSyncedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).WaitSynced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandpb.Protocol/WaitSynced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).WaitSynced(ctx, req.(*WaitSyncedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_ProposeConfChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeConfChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).ProposeConfChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandpb.Protocol/ProposeConfChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).ProposeConfChange(ctx, req.(*ProposeConfChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandpb.Protocol/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandpb.Protocol/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_FetchCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).FetchCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandpb.Protocol/FetchCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).FetchCluster(ctx, req.(*FetchClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_FetchReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).FetchReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandpb.Protocol/FetchReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).FetchReadState(ctx, req.(*FetchReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Protocol_ServiceDesc is the grpc.ServiceDesc for Protocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Protocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commandpb.Protocol",
	HandlerType: (*ProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Protocol_Propose_Handler,
		},
		{
			MethodName: "WaitSynced",
			Handler:    _Protocol_WaitSynced_Handler,
		},
		{
			MethodName: "ProposeConfChange",
			Handler:    _Protocol_ProposeConfChange_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Protocol_Publish_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Protocol_Shutdown_Handler,
		},
		{
			MethodName: "FetchCluster",
			Handler:    _Protocol_FetchCluster_Handler,
		},
		{
			MethodName: "FetchReadState",
			Handler:    _Protocol_FetchReadState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "curp-command.proto",
}
